#!/usr/bin/env python3


import argparse
import logging
import sys
import os

from ocean_drop.config_reader import ConfigReader
from ocean_drop import OceanDrop
from ocean_drop.utils import show_size_as_text

DEFAULT_CONFIG_FILENAME = './ocean_drop.conf'
DEFAULT_MAX_COUNT = 0

COMMAND_LIST = {
    'upload': 'Upload a new files as assets onto the Ocean Network.',
    'download': 'Download any new asset from the Ocean Newtwork.',
    'status': 'Show the status and stats of the number of files that need to be synced.',
    'watch': 'Watch for new dowload consume payment requests, to complete the consumer payment transactions.',
    'account': 'Manage accounts you can add options "list" and "add"',
}

def show_command_help():
    print('\nThe following commands can be used:\n')
    print('Command              Description')
    for name, line in COMMAND_LIST.items():
        print(f'{name:20} {line}\n')


def show_sync_satus(sync):

    stats = sync.stats
    total_space_text = show_size_as_text(stats['total_size'])
    result = [
        f'Total files: {stats["file_count"]}',
        f'Total disk space used: {total_space_text}',
        f'Uploaded/Downloaded: {stats["sync_count"]}',
        f'Available to download:  {stats["download_count"]}',
        f'Available to upload: {stats["upload_count"]}',
    ]
    print('\n'.join(result))

    print('\nFiles waiting for upload')
    print('-' * 40)
    for filename in sync.upload_file_list:
        print(filename)
    print(f'Found {stats["upload_count"]} files waiting to upload')

    print('\nFiles waiting to be downloaded')
    print('-' * 40)
    for filename in sync.download_file_list:
        print(filename)
    print(f'Found {stats["download_count"]} files waiting to download')

def main():
    parser = argparse.ArgumentParser('Ocean Drop')
    command_list_text = '","'.join(COMMAND_LIST)
    parser.add_argument(
        'drop_command',
        nargs='*',
        type=str,
        help=f'The type of commands: "{command_list_text}"',
    )

    parser.add_argument(
        '-c', '--config',
        help=f'sets the config file. Default: {DEFAULT_CONFIG_FILENAME}',
        default=DEFAULT_CONFIG_FILENAME,
    )

    parser.add_argument(
        '-p', '--path',
        help=f'sets the upload or download path to get or place the data files',
    )

    parser.add_argument(
        '-d', '--debug',
        action='store_true',
        help='show debug log',
    )

    parser.add_argument(
        '-m', '--max',
        type=int,
        help=f'Only upload/download maximum number of assets. Default: {DEFAULT_MAX_COUNT} ( 0 = No limit )',
        default=DEFAULT_MAX_COUNT,
    )

    parser.add_argument(
        '--help-commands',
        action='store_true',
        help='show the help for the possible commands'
    )

    parser.add_argument(
        '--name',
        help='Upload or download a file matching with the name provided'
    )

    parser.add_argument(
        '-n', '--dry-run',
        action='store_true',
        help='if enabled then process as a upload or download but do not change any files'
    )

    args = parser.parse_args()

    if args.help_commands:
        show_command_help()
        return

    config = ConfigReader()
    if not os.path.exists(args.config):
        print(f'cannot find config file "{args.config}"')
        return
    config.read(args.config)

    logger = logging.getLogger('ocean_drop')
    logging.basicConfig(stream=sys.stdout, level=logging.INFO)
    if args.debug:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
        logger.setLevel(logging.DEBUG)

    if args.path:
        config.main.drop_path = args.path

    logger.info(f'drop folder is {config.main.drop_path}')
    ocean_drop = OceanDrop(config)

    if args.drop_command:
        command_text = args.drop_command[0].lower()[:3]
        if command_text == 'upl':
            ocean_drop.upload(args.max, args.name, args.dry_run)
        elif command_text == 'dow':
            ocean_drop.download(args.max, args.name, args.dry_run)
        elif command_text == 'sta':
            sync = ocean_drop.get_sync
            if sync:
                show_sync_satus(sync)
            else:
                print('cannot connect to get the status')
        elif command_text == 'wat':
            ocean_drop.process_payment_events()
        elif command_text == 'acc':
            if args.drop_command[1] == 'list':
                account_list = ocean_drop.account_list()
                if account_list:
                    for address, account in account_list.items():
                        print(account)
            elif args.drop_command[1] == 'add':
                if not args.drop_command[2]:
                    print('Please provide a password')
                else:
                    address = ocean_drop.account_add(args.drop_command[2])
                    if address:
                        print(f'created a new account {address}')
                    else:
                        print('failed to create a new account')
        else:
            print(f'unknown command {args.drop_command}')
            show_command_help()


if __name__ == '__main__':
    main()
